def test_successful_delete_self_pet():


    if len(my_pets['pets']) == 0:
        pf.add_new_pet(auth_key, "Cartoon", "cat", "4", "images/111.jpg")
        _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")
        _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")



        pet_id = my_pets['pets'][0]['id']
        pet_id = my_pets['pets'][0]['id']

        status, _ = pf.delete_pet(auth_key, pet_id)
        status, _ = pf.delete_pet(auth_key, pet_id)


        _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")
        _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")

        assert status == 200


        assert pet_id not in my_pets.values()


def test_successful_delete_self_pet():
    """Проверяем возможность удаления питомца"""

    # Получаем ключ auth_key и запрашиваем список своих питомцев





    # Проверяем - если список своих питомцев пустой, то добавляем нового и опять запрашиваем список своих питомцев
    if len(my_pets['pets']) == 0:
        pf.add_new_pet(auth_key, "Суперкот", "кот", "3", "images/cat1.jpg")
        _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")

    # Берём id первого питомца из списка и отправляем запрос на удаление
    pet_id = my_pets['pets'][0]['id']
    status, _ = pf.delete_pet(auth_key, pet_id)

    # Ещё раз запрашиваем список своих питомцев
    _, my_pets = pf.get_list_of_api_pets(auth_key, "my_pets")

    # Проверяем что статус ответа равен 200 и в списке питомцев нет id удалённого питомца
    assert status == 200
    assert pet_id not in my_pets.values()